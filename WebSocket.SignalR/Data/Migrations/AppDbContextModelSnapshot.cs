// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebSocket.SignalR.Data;

#nullable disable

namespace WebSocket.SignalR.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3780e3e1-06b3-4d3b-aae4-18385d99d15e"),
                            Name = "Ação"
                        },
                        new
                        {
                            Id = new Guid("74631e9a-cb50-4e47-b185-36535c6813d4"),
                            Name = "Comédia"
                        },
                        new
                        {
                            Id = new Guid("a2d4b3e2-26fa-4930-b23e-d7c8fa1b61a9"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("15e74541-70f5-452a-9421-a02b86b42cf7"),
                            Name = "Terror"
                        },
                        new
                        {
                            Id = new Guid("76db2525-314d-4b91-bab2-e1390f09c68f"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("7ff7e4ea-7abd-41d8-849b-a4a0ffdf5414"),
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = new Guid("a5d151b9-1788-4aa5-b983-a1fce161e756"),
                            Name = "Animação"
                        });
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Release")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sinopsys")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Starring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Name = "Sala padrão 2D",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("0acdd5d6-a868-465b-ac56-2a0a84a71e8f"),
                            Name = "Sala Pequena IMAX",
                            Type = 3
                        });
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHandicapAccessible")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomSeats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5922d7c3-feba-4169-ab31-f861a7b722e2"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("fd2c22cc-c46d-48f6-95e9-0b35c896c0ea"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("30abacb2-eaaa-416e-adc9-0f30be118349"),
                            Column = 2,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("4e97bc46-a1ba-410f-9c6d-f3ad6513ed19"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("a21f6176-1a04-4f36-b0c4-32ae7640414d"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("ea0bd1c8-2c2a-4600-8b45-947d73a6cd1b"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("a4e4559b-95fb-4be9-9408-c5bd22805be2"),
                            Column = 2,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("d50831d2-8e20-4318-871f-bdaf524c277b"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("5ff19dfe-b442-4210-9e4b-f7e6928dea06"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("4a1e4fc1-cd3e-40ae-a376-408076eb9102"),
                            Column = 1,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("b9d16f5e-a50c-4ba9-8e57-e29c58186959"),
                            Column = 2,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("41eb7888-0655-43f1-847a-bcb520c32dfe"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("b0da2a16-cf90-4952-9efa-56f36016d2c5"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("1f2c1dc5-7ed9-4083-8045-1d1d6b9bc46d"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("0acdd5d6-a868-465b-ac56-2a0a84a71e8f"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("373f39c1-bf5f-42bc-abb0-6c60261cfca6"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("0acdd5d6-a868-465b-ac56-2a0a84a71e8f"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("da9b786e-4210-459f-a894-99bbe3741256"),
                            Column = 2,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("0acdd5d6-a868-465b-ac56-2a0a84a71e8f"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("4e4bd0ca-4708-4ba8-93ef-2a9aae799355"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("0acdd5d6-a868-465b-ac56-2a0a84a71e8f"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("1f95fcc5-47f7-4e7f-96e0-81eb4b2792e0"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("0acdd5d6-a868-465b-ac56-2a0a84a71e8f"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("efcb76fe-3605-4be5-8c99-27474531f397"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("0acdd5d6-a868-465b-ac56-2a0a84a71e8f"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("edea3885-2800-4ec8-8efe-b401a23396f5"),
                            Column = 2,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("0acdd5d6-a868-465b-ac56-2a0a84a71e8f"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("710fa2f3-cb3b-44c8-8074-65e7a02541dd"),
                            Column = 3,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("0acdd5d6-a868-465b-ac56-2a0a84a71e8f"),
                            Row = 1
                        });
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.SeatTaken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeatId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionTakenRoomSeats", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("WebSocket.SignalR.Data.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Data.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebSocket.SignalR.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebSocket.SignalR.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebSocket.SignalR.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Seat", b =>
                {
                    b.HasOne("WebSocket.SignalR.Data.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.SeatTaken", b =>
                {
                    b.HasOne("WebSocket.SignalR.Data.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Data.Session", "Session")
                        .WithMany("SeatsTaken")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Data.AppUser", "User")
                        .WithMany("SeatsTaken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Session", b =>
                {
                    b.HasOne("WebSocket.SignalR.Data.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Data.Room", "Room")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.AppUser", b =>
                {
                    b.Navigation("SeatsTaken");
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Movie", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Room", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("WebSocket.SignalR.Data.Session", b =>
                {
                    b.Navigation("SeatsTaken");
                });
#pragma warning restore 612, 618
        }
    }
}
