// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebSocket.SignalR.Data;

#nullable disable

namespace WebSocket.SignalR.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240506001225_Update tbSessions")]
    partial class UpdatetbSessions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("54396e13-d0e5-4096-923b-7856990d63ae"),
                            Name = "Ação"
                        },
                        new
                        {
                            Id = new Guid("a2c23ed1-ced5-4762-80e0-77c0707ff4df"),
                            Name = "Comédia"
                        },
                        new
                        {
                            Id = new Guid("a0839071-dd25-417e-bdae-dfdcb9b3df99"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("f8417760-2d7e-4df5-bc75-fc2c898a2686"),
                            Name = "Terror"
                        },
                        new
                        {
                            Id = new Guid("9418fe5a-27a9-44f9-87f5-c3b3ff87baa7"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("65289e59-11b8-4208-a3d8-41f294d2879c"),
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = new Guid("ee57d9e1-f4c1-4848-bd2c-502e7dd2d9df"),
                            Name = "Animação"
                        });
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Classification")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Release")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sinopsys")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Starring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Name = "Sala padrão 2D",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("a1ff1623-2add-415a-957a-604d6f7c1094"),
                            Name = "Sala Pequena IMAX",
                            Type = 3
                        });
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHandicapAccessible")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomSeats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("88943a95-f6ba-477e-8692-904b65a6a8db"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("8cfc42ea-3cc5-49c0-b35f-1df6b02196be"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("29c213f6-607a-4bf2-9d19-7a71b1e13370"),
                            Column = 2,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("9087ea22-a463-4207-ba06-f957c758e1cc"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("685c7952-357d-4ee3-a10f-72fe8b5b6114"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("e5702a70-66fb-4e3c-9a87-97346f228b0f"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("dd8eff28-f63f-4711-b732-45ec3d851f8d"),
                            Column = 2,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("fed43064-ba4b-4b37-9110-5459f6e4e702"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("769b044f-9ad1-44bf-9f77-7f2ea12f875a"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("60ef0c69-76b9-4e8a-a10b-1a95689095b4"),
                            Column = 1,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("dbd38ba3-f6b6-4a18-b2e1-a111e96e266c"),
                            Column = 2,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("7f459720-7820-45aa-a1e5-9a25e9e24dad"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("bc90e7eb-efb4-4ee4-933d-a3772de6c0ba"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("e92fc480-a08f-4bee-98c4-332b1837d800"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("a1ff1623-2add-415a-957a-604d6f7c1094"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("076d1b46-ccbd-4bcb-82a0-97f28109d642"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("a1ff1623-2add-415a-957a-604d6f7c1094"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("822e9bd0-1542-4ca5-95c8-8e7c087ff364"),
                            Column = 2,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("a1ff1623-2add-415a-957a-604d6f7c1094"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("d5cecf86-32ab-4b80-bad4-5d46bc0dbf6f"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("a1ff1623-2add-415a-957a-604d6f7c1094"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("eeb95a5e-5e29-4158-a332-46560c04c1a4"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("a1ff1623-2add-415a-957a-604d6f7c1094"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("28dd8450-49c7-4cc6-8190-a51d7b0f8105"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("a1ff1623-2add-415a-957a-604d6f7c1094"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("b793dd6a-f957-45f7-bd0f-9cf4c43f4f52"),
                            Column = 2,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("a1ff1623-2add-415a-957a-604d6f7c1094"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("78dbc3b3-e958-4b7a-a515-c592c3185f39"),
                            Column = 3,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("a1ff1623-2add-415a-957a-604d6f7c1094"),
                            Row = 1
                        });
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.SeatTaken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeatId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionTakenRoomSeats", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("RoomId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Seat", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.SeatTaken", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.Session", "Session")
                        .WithMany("SeatsTaken")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.AppUser", "User")
                        .WithMany("SeatsTaken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Session", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.AppUser", b =>
                {
                    b.Navigation("SeatsTaken");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Room", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Session", b =>
                {
                    b.Navigation("SeatsTaken");
                });
#pragma warning restore 612, 618
        }
    }
}
