// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebSocket.SignalR.Data;

#nullable disable

namespace WebSocket.SignalR.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240504234941_Update tbMovies")]
    partial class UpdatetbMovies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("25aab2d0-d389-4661-9b97-3b4b63bd9fd1"),
                            Name = "Ação"
                        },
                        new
                        {
                            Id = new Guid("9828e527-6a0f-4e6b-962a-384bd4759452"),
                            Name = "Comédia"
                        },
                        new
                        {
                            Id = new Guid("150b2a24-6ca9-4a84-8ae4-d884589ac658"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("131387f8-bc2e-4838-b2ec-948c6dd6c051"),
                            Name = "Terror"
                        },
                        new
                        {
                            Id = new Guid("cbc7a9f2-28f7-4b35-bff9-957162cbbc31"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("d7c7713c-a943-4623-86ce-6659d0ae5e4d"),
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = new Guid("0d0d0417-b0f1-4c42-a950-caf741e5a521"),
                            Name = "Animação"
                        });
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Classification")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Release")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sinopsys")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Starring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Name = "Sala padrão 2D",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("28ec0f7e-6c9a-4ffa-9098-41181eacd861"),
                            Name = "Sala Pequena IMAX",
                            Type = 3
                        });
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHandicapAccessible")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomSeats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ce71217-6634-4fa8-bcd8-f64ee3e3085f"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("7c528416-2237-4fc3-98eb-31a73f859502"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("84aa120c-c9b2-4b74-a03e-f008eb1d9fda"),
                            Column = 2,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("0850d9d5-ca1b-4863-b93d-0b3f4e0dca29"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("a1349ea5-a2a7-43e1-be56-b2bc7cc0265b"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("596695c5-70c9-4fa4-b0cb-d7b538308fd2"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("8cc906a2-fbd2-4763-8216-27cb46505974"),
                            Column = 2,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("5e628ce9-f90c-4cd8-bf0e-8ad34ba11191"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("d359ca09-0e23-479d-abf3-174d81f4999b"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("ec245938-d1d1-4803-8425-98a6f1526d14"),
                            Column = 1,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("1732b929-eb07-46aa-a65e-9d26e9482403"),
                            Column = 2,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("43a769c2-d328-4ae9-9cfb-154039692fc7"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("c8e4d09f-926f-41f3-abbc-9d16690599b4"),
                            Row = 2
                        },
                        new
                        {
                            Id = new Guid("438a8755-0327-40ec-835f-feb443e6c2d7"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("28ec0f7e-6c9a-4ffa-9098-41181eacd861"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("d7fe6785-2570-4cf8-a7ea-3b13d1b749f0"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("28ec0f7e-6c9a-4ffa-9098-41181eacd861"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("8507c188-7de4-4fb0-a047-c7eb1a67ebd3"),
                            Column = 2,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("28ec0f7e-6c9a-4ffa-9098-41181eacd861"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("2c9a0def-6529-49c0-a063-0a16585e8c9d"),
                            Column = 3,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("28ec0f7e-6c9a-4ffa-9098-41181eacd861"),
                            Row = 0
                        },
                        new
                        {
                            Id = new Guid("a5665c3a-3469-4cb2-9008-dab7de7cfe62"),
                            Column = 0,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("28ec0f7e-6c9a-4ffa-9098-41181eacd861"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("e23638f3-a8be-4255-872a-891a05488676"),
                            Column = 1,
                            IsHandicapAccessible = false,
                            RoomId = new Guid("28ec0f7e-6c9a-4ffa-9098-41181eacd861"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("c796a0f9-f241-4afc-8668-281c43f3c0d2"),
                            Column = 2,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("28ec0f7e-6c9a-4ffa-9098-41181eacd861"),
                            Row = 1
                        },
                        new
                        {
                            Id = new Guid("62039173-d7e1-48a1-905c-6ab3388d6373"),
                            Column = 3,
                            IsHandicapAccessible = true,
                            RoomId = new Guid("28ec0f7e-6c9a-4ffa-9098-41181eacd861"),
                            Row = 1
                        });
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.SeatTaken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeatId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionTakenRoomSeats", (string)null);
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Seat", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.SeatTaken", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.Session", "Session")
                        .WithMany("SeatsTaken")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.AppUser", "User")
                        .WithMany("SeatsTaken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Session", b =>
                {
                    b.HasOne("WebSocket.SignalR.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebSocket.SignalR.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.AppUser", b =>
                {
                    b.Navigation("SeatsTaken");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Room", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("WebSocket.SignalR.Models.Session", b =>
                {
                    b.Navigation("SeatsTaken");
                });
#pragma warning restore 612, 618
        }
    }
}
